set(libPrefix "lib")
set(SRCDIR "${CMAKE_SOURCE_DIR}")

message("CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")



execute_process(COMMAND git describe --always --candidates 1 --long WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE GIT_DESCRIPTION OUTPUT_STRIP_TRAILING_WHITESPACE )
message("GIT_DESCRIPTION: ${GIT_DESCRIPTION}")

execute_process(COMMAND git rev-parse HEAD WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE GIT_COMMIT_ID OUTPUT_STRIP_TRAILING_WHITESPACE )
message("GIT_COMMIT_ID: ${GIT_COMMIT_ID}")

execute_process(COMMAND git branch --show-current WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE GIT_BRANCH OUTPUT_STRIP_TRAILING_WHITESPACE )
message("GIT_BRANCH: ${GIT_BRANCH}")




string(TIMESTAMP CMAKE_TIMESTAMP "%d-%m-%Y %H:%M:%S")
message("CMAKE_TIMESTAMP: ${CMAKE_TIMESTAMP}")

set(TARGET_COMPANY "TsAah[THoF]")
set(TARGET_PRODUCT "Whisper")
set(TARGET_DESCRIPTION "Yet another messenger")
set(TARGET_COPYRIGHT "Â© TsAah[THoF]")
set(TARGET_VERSION_REPO "Whisper")
set(TARGET_ICON_PATH "${SRCDIR}/whisper.ico")
set(TARGET_VERSION_REPO "")

set(TARGET_VERSION_MAJOR "0")
set(TARGET_VERSION_MINOR "0")
set(TARGET_VERSION_PATCH "0")
set(TARGET_VERSION_BUILD "0")

set(TARGET_PRODUCT_VERSION_MAJOR "0")
set(TARGET_PRODUCT_VERSION_MINOR "0")
set(TARGET_PRODUCT_VERSION_PATCH "0")
set(TARGET_PRODUCT_VERSION_BUILD "0")















set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_EXTENSIONS OFF)

find_package(Qt5 COMPONENTS
    Core
    Gui
    Network
    Qml
    Quick
#    Quickcontrols2
    REQUIRED
)

set(QT_LIBS
    Qt5::Core
    Qt5::Gui
    Qt5::Network
    Qt5::Qml
    Qt5::Quick
#    Qt5::Quickcontrols2
)

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
endif()

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)


